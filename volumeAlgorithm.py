import math
# import matplotlib.pyplot as plt
from parameter import FeedBucket

def drawScatterPlot(points,special_points=None):
    """画散点图，项目中无需使用该函数，就是测算法的时候用

    Args:
        points (_type_): 要绘制的点的坐标
        special_points (_type_, optional):特殊点的坐标。 Defaults to None.
    """
    # 提取数据点的横坐标和纵坐标
    x = [d[0] for d in points]
    y = [d[1] for d in points]

    # 创建一个新的图形对象
    fig, ax = plt.subplots()
    # 在坐标系上画出所有数据点
    ax.scatter(x, y, color='red',s=5)
    # 在坐标系上连接各个数据点
    if special_points is not None:
        # 标记特殊的点
        special_x = [p[0] for p in special_points]
        special_y = [p[1] for p in special_points]

        ax.scatter(special_x, special_y, color='blue')

    # 设置坐标轴标签和标题
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_title('Scatter Plot')
    # 显示图形
    plt.show()

def clearData(points):
    """处理数据列表,剔除异常数据，这一块暂时没处理好，不知道如何判断异常数据

    Args:
        points(list):每个元素是一个元组，表示一个坐标点 包含x轴和y轴的数据
    Returns:
        points(list):每个元素是一个元组，表示一个坐标点 包含x轴和y轴的数据
    """

    # ds_len=len(points)
    # for i in range(1,ds_len-1): #处理异常数据
    #     if(ds[i]!=None):
    #         j=i-1
    #         while ds[j]==None:j=j-1
    #         NoNoneNumber= ds[j]      #找到不为空的数据
    #         if abs(ds[i]-NoNoneNumber)>0.05:
    #             ds[i]=None

    return points

def convertCartesian(ds):
    """将ds中的数据按角度排序并转换成直角坐标系

    Args:
        ds (dic): 距离字典，键是角度，值是距离

    Returns:
        points(list):每个元素是一个元组，表示一个坐标点 包含x轴和y轴的数据
    """
    sorted_dict = {float(k): v for k, v in sorted(ds.items(), key=lambda item: float(item[0]))}
    points=[]
    for key,value in sorted_dict.items():
        radius = value+FeedBucket["rangeFinderLen"]
        theta = math.radians(float(key))
        xv = radius * math.cos(theta)+FeedBucket["disOfRangefinder2circleCenter"]
        yv = radius * math.sin(theta)
        points.append((xv, yv))
    # print(points)
    return points


def find_middlePoint(points):
    """因为粉仓的对称性，找到离y轴最近的点，当作中心点

    Args:
        points(list):包含扫描一周的点。每个元素是一个列表，表示一个坐标点 包含x轴和y轴的数据

    Returns:
        minIndex(int): 返回中间点的坐标
    """
    minx=float(FeedBucket["radius"])
    minIndex=0
    for i in range(len(points)):
        if abs(points[i][0])<minx: 
            minx=points[i][0]
            minIndex=i
    # print("minIndex",minIndex)
    return minIndex

def calculous(points,middIndex):
    """用微积分的方法计算体积，只需计算0到中点的一半数据点绕y轴旋转所得体积

    Args:
        
    Returns:
        sumV: 体积
    """
    sumV=0
    for i in range(middIndex):
        dx=points[i][0]-points[i+1][0]
        if(dx>0):
            dy=2*math.pi*points[i][0]
            dh=points[i][1]
            dv=dx*dy*dh
            sumV+=dv
    print("扫描计算得出sumV=",sumV)
    return sumV

def caculateV(ds):
    """求粉料体积
    Args:
        ds (list):测距仪的结果
        
    Returns:
        V(float): 计算得到的体积，若返回None,则说明
    """
    points=convertCartesian(ds)
    points=clearData(points)  #待修改
    # 用微积分计算体积
    middIndex=find_middlePoint(points)
    print("middIndex:",middIndex)
    # special_points = [points[63],points[middIndex]]
    # drawScatterPlot(points,special_points)

    V=calculous(points,middIndex)   #算出来的是空气的体积，而不是粉料的体积
    V=FeedBucket["volume"]-V    #用空桶体积减一下才是粉料体积
    return V

# data1={'18.72': 0.16, '55.92': 0.3035, '81.12': 0.8386, '46.32': 0.2353, '94.32': 1.1014, '40.56': 0.2075, '44.16': 0.2248, '69.12': 0.5166, '61.92': 0.3744, '70.32': 0.5591, '71.52': 0.5923, '21.12': 0.163, '15.12': 0.1572, '11.52': 0.1552, '49.92': 0.2561, '65.52': 0.4367, '57.36': 0.3165, '121.92': 0.6492, '118.32': 0.7309, '115.92': 0.7998, '138.72': 0.4337, '119.52': 0.7028, '129.12': 0.537, '6.72': 0.1528, '109.92': 0.8705, '125.52': 0.5884, '114.72': 0.8118, '131.52': 0.5036, '135.12': 0.4636, '102.72': 0.9839, '106.32': 0.9212, '67.92': 0.4858, '82.32': 0.8604, '78.72': 0.7984, '29.76': 0.1769, '73.92': 0.6819, '59.76': 0.3479, '33.12': 0.1865, '53.52': 0.2826, '58.32': 0.3291, '92.16': 1.0481, '77.52': 0.7823, '22.32': 0.1646, '10.32': 0.1549, '23.52': 0.1663, '30.72': 0.1814, '66.72': 0.4559, '54.72': 0.2947, '34.32': 0.1909, '47.52': 0.2421, '141.12': 0.4164, '145.92': 0.3856, '7.92': 0.1536, '108.72': 0.8845, '64.56001': 0.4142, '130.56': 0.5203, '132.72': 0.4898, '111.12': 0.8514, '136.32': 0.4537, '139.92': 0.4259, '101.52': 1.0038, '105.12': 0.9434999, '42.96': 0.2191, '97.92001': 1.0744, '84.72': 0.9115, '26.16': 0.1724, '13.92': 0.1568, '93.12': 1.0946, '37.92': 0.1997, '60.72': 0.3604, '72.72': 0.642, '83.52': 0.8836, '87.12': 0.963, '76.32': 0.7647, '17.52': 0.1598, '12.72': 0.1561, '75.36': 0.7503, '63.12': 0.392, '88.32': 0.9983, '41.76': 0.2132, '16.8': 0.1579, '149.52': 0.3685, '123.12': 0.6288, '143.52': 0.3996, '147.12': 0.3838, '152.16': 0.3577, '153.36': 0.3521, '0.72': 0.1521, '4.32': 0.1531, '148.32': 0.3734, '112.32': 0.84, '3.12': 0.153, '100.32': 1.0345, '120.72': 0.6769, '124.32': 0.6072001, '144.72': 0.3932, '28.32': 0.175, '96.72': 1.0866, '48.72': 0.2475, '155.52': 0.343, '156.72': 0.3414, '159.12': 0.332, '160.56': 0.3307, '161.52': 0.3254, '24.72': 0.168, '162.72': 0.3241, '163.92': 0.3199, '36.72': 0.1981, '165.12': 0.3186, '52.32': 0.275, '166.56': 0.3146, '167.52': 0.3146, '168.72': 0.3136, '91.2': 1.0219, '103.92': 0.9583, '133.92': 0.4768, '127.92': 0.5493, '157.92': 0.3367, '169.92': 0.3117, '171.12': 0.3103, '172.32': 0.3103, '137.52': 0.4442, '107.52': 0.9042999, '173.52': 0.3085, '175.92': 0.3039, '177.12': 0.3039, '2.16': 0.1526, '113.52': 0.8259, '95.52': 1.1007, '117.12': 0.7635, '31.92': 0.1825, '39.12': 0.2059, '179.52': 0.303, '19.92': 0.1615, '45.12': 0.2305, '35.52': 0.1924, '27.36': 0.1732, '51.12': 0.2659, '85.92': 0.9375, '79.92': 0.8156, '89.52': 1.0219, '99.12': 1.056, '9.12': 0.154, '178.32': 0.3035, '0': 0.1526, '5.52': 0.1531, '150.72': 0.3621, '126.72': 0.5668, '154.32': 0.3501, '142.32': 0.4074, '174.72': 0.3041}
# data4={'18.72': 0.1597, '55.92': 0.3039, '59.52': 0.3445, '81.12': 0.5651, '42.72': 0.2186, '46.32': 0.2359, '40.56': 0.2089, '61.92': 0.3781, '94.32': 0.5072, '71.52': 0.5938, '21.12': 0.1627, '15.12': 0.1563, '11.52': 0.1536, '49.92': 0.2571, '53.76': 0.2819, '65.52': 0.4352, '78.0': 0.597, '115.92': 0.685, '119.52': 0.7046, '6.72': 0.1512, '117.36': 0.7049, '90.96001': 0.5122, '121.92': 0.652, '125.52': 0.5883, '129.12': 0.5376, '114.72': 0.6627, '67.92': 0.4839, '131.52': 0.505, '106.32': 0.5502, '102.72': 0.5282, '135.12': 0.4657, '82.32': 0.5561, '36.96': 0.1914, '78.72': 0.587, '43.92': 0.225, '33.12': 0.1852, '57.12': 0.3164, '23.52': 0.1672, '58.32': 0.3285, '47.52': 0.2415, '118.56': 0.7214, '22.32': 0.1671, '10.32': 0.1527, '138.72': 0.4364, '30.72': 0.1798, '66.72': 0.4545, '54.72': 0.2952, '34.32': 0.1903, '7.92': 0.1515, '108.72': 0.5752, '141.12': 0.4171, '149.52': 0.3692, '151.92': 0.358, '159.12': 0.3371, '132.72': 0.4912, '136.32': 0.455, '111.12': 0.6084, '146.16': 0.3872, '84.72': 0.5398, '101.52': 0.5232, '105.12': 0.5387, '155.52': 0.344, '97.92001': 0.5058, '160.32': 0.3288, '69.36': 0.514, '93.12': 0.5091, '60.72': 0.3576, '37.92': 0.1972, '14.16': 0.1553, '64.32': 0.4135, '83.52': 0.5467, '87.12': 0.5281, '72.72': 0.6425, '17.52': 0.1585, '76.32': 0.6092, '75.36': 0.6212, '63.12': 0.3907, '12.72': 0.1542, '41.76': 0.2133, '16.32': 0.1574, '74.16': 0.6364, '150.96': 0.3628, '123.12': 0.6316, '143.52': 0.4004, '147.12': 0.3829, '161.52': 0.3288, '0.72': 0.1498, '4.32': 0.1507, '70.56001': 0.56, '112.32': 0.6238, '3.12': 0.1507, '110.16': 0.5904, '100.32': 0.5153, '124.32': 0.6092, '144.72': 0.3935, '148.32': 0.3739, '96.72': 0.5051, '48.72': 0.2477, '153.12': 0.358, '156.72': 0.339, '162.72': 0.3234, '163.92': 0.3218, '165.12': 0.3172, '166.32': 0.3159, '167.52': 0.3149, '169.92': 0.3116, '171.12': 0.3107, '172.32': 0.3107, '52.32': 0.2743, '173.52': 0.3107, '175.92': 0.306, '177.12': 0.306, '133.92': 0.4784, '103.92': 0.5329, '157.92': 0.339, '127.92': 0.5516, '179.52': 0.304, '137.52': 0.4461, '107.52': 0.5625, '2.16': 0.1504, '113.52': 0.6406, '95.52': 0.5056, '39.12': 0.2048, '31.92': 0.1843, '29.52': 0.178, '19.92': 0.1612, '45.12': 0.2296, '35.52': 0.1914, '27.36': 0.1719, '51.12': 0.2651, '85.92': 0.5334, '79.92': 0.5762, '25.92': 0.17, '89.52': 0.5164, '9.12': 0.1518, '91.92': 0.5111, '99.12': 0.5102, '178.32': 0.3045, '0': 0.1496, '120.96': 0.6798, '130.32': 0.5222, '5.52': 0.1512, '88.56001': 0.5212, '126.72': 0.5686, '140.16': 0.4272, '142.32': 0.4074, '154.32': 0.348, '168.96': 0.3133, '174.72': 0.3065, '24.96': 0.1681, '28.56': 0.1767}

# V=caculateV(data4)
# print("粉料的体积：",0.2621-V)

# V1 =(math.pi*  FeedBucket["radius"] * FeedBucket["radius"] *FeedBucket["cylinderHigh"]) 
# V2=(math.pi * FeedBucket["radius"] * FeedBucket["radius"] * FeedBucket["coneHigh"]) / 3
# print("体积公式算出V=",V1+V2)


